# Set the project name
project (sublibrary1)

cmake_minimum_required(VERSION 3.10)
# Add a library with the above sources
message(STATUS "CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}")
# message(STATUS "CMAKE_CURRENT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}")
# include_directories(${CMAKE_CURRENT_SOURCE_DIR}/)

# include_directories(${CMAKE_CURRENT_BINARY_DIR}/default/)

# set(op_declaration "${op_declaration}${layer_func}")
macro(_add_layer name)
    # string(TOLOWER ${class} name)
    
    # WITH_LAYER_xxx option
        if(${ARGC} EQUAL 2)
        option(WITH_LAYER_${name} "build with layer ${name}" ${ARGV1})
    else()
        option(WITH_LAYER_${name} "build with layer ${name}" ON)
    endif()


    # if(_CMAKE_VERBOSE)
        message(STATUS "WITH_LAYER_${name} = ${WITH_LAYER_${name}}")
    # endif()

    set(op_declaration "${op_declaration}void resolver_default_op_${name}(struct onnx_node_t * n);\n")
    set(op_definition "${op_definition}    .op_${name}							= resolver_default_op_${name},\n")

    set(op_table "${op_table}	void (*op_${name})(struct onnx_node_t * n);\n")
endmacro(_add_layer class)


_add_layer(Abs)
_add_layer(Acos)
_add_layer(Acosh)
_add_layer(Add)
_add_layer(And)
_add_layer(ArgMax)
_add_layer(ArgMin)
_add_layer(Asin)
_add_layer(Asinh)
_add_layer(Atan)
_add_layer(Atanh)
_add_layer(AveragePool)
_add_layer(BatchNormalization)
_add_layer(BitShift)
_add_layer(Cast)
_add_layer(Ceil)
_add_layer(Clip)
_add_layer(Compress)
_add_layer(Concat)
_add_layer(ConcatFromSequence)
_add_layer(Constant)
_add_layer(ConstantOfShape)
_add_layer(Conv)
_add_layer(ConvInteger)
_add_layer(ConvTranspose)
_add_layer(Cos)
_add_layer(Cosh)
_add_layer(CumSum)
_add_layer(DepthToSpace)
_add_layer(DequantizeLinear)
_add_layer(Det)
_add_layer(Div)
_add_layer(Dropout)
_add_layer(Einsum)
_add_layer(Elu)
_add_layer(Equal)
_add_layer(Erf)
_add_layer(Exp)
_add_layer(Expand)
_add_layer(EyeLike)
_add_layer(Flatten)
_add_layer(Floor)
_add_layer(GRU)
_add_layer(Gather)
_add_layer(GatherElements)
_add_layer(GatherND)
_add_layer(Gemm)
_add_layer(GlobalAveragePool)
_add_layer(GlobalLpPool)
_add_layer(GlobalMaxPool)
_add_layer(Greater)
_add_layer(HardSigmoid)
_add_layer(Hardmax)
_add_layer(Identity)
_add_layer(If)
_add_layer(InstanceNormalization)
_add_layer(IsInf)
_add_layer(IsNaN)
_add_layer(LRN)
_add_layer(LSTM)
_add_layer(LeakyRelu)
_add_layer(Less)
_add_layer(Log)
_add_layer(Loop)
_add_layer(LpNormalization)
_add_layer(LpPool)
_add_layer(MatMul)
_add_layer(MatMulInteger)
_add_layer(Max)
_add_layer(MaxPool)
_add_layer(MaxRoiPool)
_add_layer(MaxUnpool)
_add_layer(Mean)
_add_layer(Min)
_add_layer(Mod)
_add_layer(Mul)
_add_layer(Multinomial)
_add_layer(Neg)
_add_layer(NonMaxSuppression)
_add_layer(NonZero)
_add_layer(Not)
_add_layer(OneHot)
_add_layer(Or)
_add_layer(PRelu)
_add_layer(Pad)
_add_layer(Pow)
_add_layer(QLinearConv)
_add_layer(QLinearMatMul)
_add_layer(QuantizeLinear)
_add_layer(RNN)
_add_layer(RandomNormal)
_add_layer(RandomNormalLike)
_add_layer(RandomUniform)
_add_layer(RandomUniformLike)
_add_layer(Reciprocal)
_add_layer(ReduceL1)
_add_layer(ReduceL2)
_add_layer(ReduceLogSum)
_add_layer(ReduceLogSumExp)
_add_layer(ReduceMax)
_add_layer(ReduceMean)
_add_layer(ReduceMin)
_add_layer(ReduceProd)
_add_layer(ReduceSum)
_add_layer(ReduceSumSquare)
_add_layer(Relu)
_add_layer(Reshape)
_add_layer(Resize)
_add_layer(ReverseSequence)
_add_layer(RoiAlign)
_add_layer(Round)
_add_layer(Scan)
_add_layer(Scatter)
_add_layer(ScatterElements)
_add_layer(ScatterND)
_add_layer(Selu)
_add_layer(SequenceAt)
_add_layer(SequenceConstruct)
_add_layer(SequenceEmpty)
_add_layer(SequenceErase)
_add_layer(SequenceInsert)
_add_layer(SequenceLength)
_add_layer(Shape)
_add_layer(Shrink)
_add_layer(Sigmoid)
_add_layer(Sign)
_add_layer(Sin)
_add_layer(Sinh)
_add_layer(Size)
_add_layer(Slice)
_add_layer(Softplus)
_add_layer(Softsign)
_add_layer(SpaceToDepth)
_add_layer(Split)
_add_layer(SplitToSequence)
_add_layer(Sqrt)
_add_layer(Squeeze)
_add_layer(StringNormalizer)
_add_layer(Sub)
_add_layer(Sum)
_add_layer(Tan)
_add_layer(Tanh)
_add_layer(TfIdfVectorizer)
_add_layer(ThresholdedRelu)
_add_layer(Tile)
_add_layer(TopK)
_add_layer(Transpose)
_add_layer(Trilu)
_add_layer(Unique)
_add_layer(Unsqueeze)
_add_layer(Upsample)
_add_layer(Where)
_add_layer(Xor)
_add_layer(Celu)
_add_layer(DynamicQuantizeLinear)
_add_layer(GreaterOrEqual)
_add_layer(HardSwish)
_add_layer(LessOrEqual)
_add_layer(LogSoftmax)
_add_layer(MeanVarianceNormalization)
_add_layer(NegativeLogLikelihoodLoss)
_add_layer(Range)
_add_layer(Softmax)
_add_layer(SoftmaxCrossEntropyLoss)


configure_file(default/op_declaration.h.in ${CMAKE_CURRENT_BINARY_DIR}/op_declaration.h)
configure_file(default/default.c.in ${CMAKE_CURRENT_BINARY_DIR}/default.c)

file(GLOB helloworld_SRC CONFIGURE_DEPENDS "*.c" "default/*.c" "${CMAKE_CURRENT_BINARY_DIR}/default.c") 
add_library(${PROJECT_NAME} STATIC ${helloworld_SRC})

# message(STATUS "helloworld_SRC ${helloworld_SRC}")


add_library(sub::lib1 ALIAS ${PROJECT_NAME})

target_include_directories( ${PROJECT_NAME}
    PUBLIC ${PROJECT_SOURCE_DIR}/ ${PROJECT_SOURCE_DIR}/default ${CMAKE_CURRENT_BINARY_DIR}/
)

